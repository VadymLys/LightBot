import fetch from "node-fetch";
import "dotenv/config";

const token = process.env.TELEGRAM_BOT_TOKEN;
const lambdaUrl = process.env.LAMBDA_WEBHOOK_URL;

if (!token) {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!");
  process.exit(1);
}

if (!lambdaUrl) {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: LAMBDA_WEBHOOK_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!");
  console.log("üëâ –î–æ–¥–∞–π –π–æ–≥–æ –≤ .env, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:");
  console.log(
    "LAMBDA_WEBHOOK_URL=https://ho3tllx9tk.execute-api.us-east-1.amazonaws.com/dev"
  );
  process.exit(1);
}

const TELEGRAM_API = `https://api.telegram.org/bot${token}`;

async function checkWebhook() {
  try {
    console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≤–µ–±—Ö—É–∫...");
    const res = await fetch(`${TELEGRAM_API}/getWebhookInfo`);
    const data = await res.json();

    if (!data.ok) {
      console.error("‚ùå Telegram API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:", data);
      return;
    }

    const info = data.result;
    console.log("üì° –ü–æ—Ç–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ–±—Ö—É–∫:");
    console.log(JSON.stringify(info, null, 2));

    const hasError = !!info.last_error_message;
    const noUrl = !info.url || info.url.trim() === "";

    if (noUrl || hasError || info.url !== lambdaUrl) {
      console.warn("‚ö†Ô∏è –í–µ–±—Ö—É–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –û–Ω–æ–≤–ª—é—é...");
      await setWebhook();
    } else {
      console.log("‚úÖ –í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –ø—Ä–∞—Ü—é—î!");
    }
  } catch (err) {
    console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞:", err);
  }
}

async function setWebhook() {
  try {
    const res = await fetch(`${TELEGRAM_API}/setWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ url: lambdaUrl }),
    });
    const data = await res.json();

    if (data.ok) {
      console.log(`‚úÖ –í–µ–±—Ö—É–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${lambdaUrl}`);
    } else {
      console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫:", data);
    }
  } catch (err) {
    console.error("üí• –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞:", err);
  }
}

checkWebhook();
